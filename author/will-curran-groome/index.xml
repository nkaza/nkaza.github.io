<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Will Curran-Groome | Nikhil Kaza</title>
    <link>https://nkaza.github.io/author/will-curran-groome/</link>
      <atom:link href="https://nkaza.github.io/author/will-curran-groome/index.xml" rel="self" type="application/rss+xml" />
    <description>Will Curran-Groome</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© 2018-2025 Nikhil Kaza</copyright><lastBuildDate>Mon, 31 Aug 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://nkaza.github.io/media/icon_hu1ca6a6912ef6c300619228a995d3f134_46128_512x512_fill_lanczos_center_3.png</url>
      <title>Will Curran-Groome</title>
      <link>https://nkaza.github.io/author/will-curran-groome/</link>
    </image>
    
    <item>
      <title>Analysing Free Form Text</title>
      <link>https://nkaza.github.io/post/analysing-free-form-text/</link>
      <pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://nkaza.github.io/post/analysing-free-form-text/</guid>
      <description>&lt;script src=&#34;https://nkaza.github.io/post/analysing-free-form-text/index_files/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://nkaza.github.io/post/analysing-free-form-text/index_files/plotly-binding/plotly.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://nkaza.github.io/post/analysing-free-form-text/index_files/typedarray/typedarray.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://nkaza.github.io/post/analysing-free-form-text/index_files/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://nkaza.github.io/post/analysing-free-form-text/index_files/crosstalk/css/crosstalk.min.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://nkaza.github.io/post/analysing-free-form-text/index_files/crosstalk/js/crosstalk.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://nkaza.github.io/post/analysing-free-form-text/index_files/plotly-htmlwidgets-css/plotly-htmlwidgets.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://nkaza.github.io/post/analysing-free-form-text/index_files/plotly-main/plotly-latest.min.js&#34;&gt;&lt;/script&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this post, I am going to introduce basic methods for analysing free form (i.e., unstructured) text. In a different post, we analysed some [free form text that is somewhat semi-structured] (/post/matching-messy-texts/) (e.g., addresses, firm names, etc.). In this post, we will expand on some of those techniques and explicitly focus on quantifying frequencies of words, topics, and sentiments. Free form texts are ubiquitous in the planning field. For example, you may want to understand public sentiment around a proposed project by analysing tweets or public comments. Or you may want to analyse newspaper articles and blogs to understand trending topics. The possibilities are endless.&lt;/p&gt;
&lt;p&gt;However, by its very nature, unstructured text and natural language is very hard to pin down in numbers. Even things that are amenable to quantification (e.g., frequencies of words) lose context–and thus meaning and nuance–when quantified. Qualitative analysis of text is always more meaningful than reductive quantitative analyses. Nonetheless, quantitative approaches are useful for examinining large bodies of text (also referred to as a “corpus” of texts), and they can provide some advantages over qualitative analyses, including replicability and scalability.&lt;/p&gt;
&lt;h2 id=&#34;acquire-data-and-packages&#34;&gt;Acquire Data and Packages&lt;/h2&gt;
&lt;p&gt;This post draws heavily from Will Curran-Groome’s final project for the &lt;a href=&#34;https://nkaza.github.io/teaching/techniques-course/&#34;&gt;Urban Analytics course&lt;/a&gt; in Spring 2020. We are going to analyse emails from a listserv (Cohousing-L) that focuses on cohousing. Cohousing is an intentional community of private homes clustered around shared space with some shared norms about voluntary contributions, management, and governance structures. US cohousing communities often comprise both rental and owner-occupied units; they frequently are multi-generational; they leverage existing legal structures, most often the home owner association (HOA), but the lived experience is often very different from that of conventional HOAs; and they also reflect a diversity of housing types, including apartment buildings, side-by-side duplexes and row homes, and detached single-family units.&lt;/p&gt;
&lt;p&gt;Web-scraped emails (~45,000) and community characteristics are available &lt;a href=&#34;https://www.dropbox.com/sh/q1sp6a8uhremq1m/AAC-J0t48mFeKjiQlzAbeWGPa?dl=0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this tutorial, we are going to use packages such as &lt;code&gt;tidytext&lt;/code&gt;, &lt;code&gt;textclean&lt;/code&gt;, and &lt;code&gt;sentimentr&lt;/code&gt; in addition to other packages we have used previously. Please install them and call them into your library appropriately.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    I am using the library calls to packages where I need them for pedagogical purposes. In general, you want to put all your library calls at the top of the script. Please pay particular attention to conflicts in the functions of the same name in different packages. Packages that are loaded later will take precedence over ones that are loaded earlier. If you want use the function from an earlier loaded package you can use &lt;code&gt;packagename::function()&lt;/code&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ids)
library(lubridate)
library(textclean)

msgs &amp;lt;- here(&amp;quot;tutorials_datasets&amp;quot;, &amp;quot;cohousingemails&amp;quot;, &amp;quot;cohousing_emails.csv&amp;quot;) %&amp;gt;% read_csv()

str(msgs)
# spec_tbl_df [45,000 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)
#  $ subject : chr [1:45000] &amp;quot;Test message 10/22/92 6:37 pm&amp;quot; &amp;quot;test message 10/22/92 6:47 pm&amp;quot; &amp;quot;Places to announce COHOUSING-L&amp;quot; &amp;quot;Discussion style&amp;quot; ...
#  $ author  : chr [1:45000] &amp;quot;Fred H Olson -- WB0YQM&amp;quot; &amp;quot;STAN&amp;quot; &amp;quot;Fred H Olson -- WB0YQM&amp;quot; &amp;quot;Fred H Olson -- WB0YQM&amp;quot; ...
#  $ email   : chr [1:45000] NA NA NA NA ...
#  $ date    : POSIXct[1:45000], format: NA NA ...
#  $ msg_body: chr [1:45000] &amp;quot;This is a test message. Fred&amp;quot; &amp;quot;Thes message was set to the list with the address in all caps: COHOUSING-L [at] UCI.COM Fred&amp;quot; &amp;quot;Judy, below is my list of places to announce the list including the Inovative Housing newsletter. Can you dig u&amp;quot;| __truncated__ &amp;quot;Another topic is what tone, style or whatever should we encourage on this list. Some discussions people introdu&amp;quot;| __truncated__ ...
#  $ thread  : chr [1:45000] NA NA NA NA ...
#  $ content : chr [1:45000] &amp;quot;\n\n\n\n\n\n\n\n\nTest message 10/22/92 6:37 pm\n\t  &amp;lt;– Date –&amp;gt;    &amp;lt;– Thread –&amp;gt;\n\n\tFrom: Fred H Olson -- WB0Y&amp;quot;| __truncated__ &amp;quot;\n\n\n\n\n\n\n\n\ntest message 10/22/92 6:47 pm\n\t  &amp;lt;– Date –&amp;gt;    &amp;lt;– Thread –&amp;gt;\n\n\tFrom: STAN (STAN%MNHEPvx.c&amp;quot;| __truncated__ &amp;quot;\n\n\n\n\n\n\n\n\nPlaces to announce COHOUSING-L\n\t  &amp;lt;– Date –&amp;gt;    &amp;lt;– Thread –&amp;gt;\n\n\tFrom: Fred H Olson -- WB0&amp;quot;| __truncated__ &amp;quot;\n\n\n\n\n\n\n\n\nDiscussion style\n\t  &amp;lt;– Date –&amp;gt;    &amp;lt;– Thread –&amp;gt;\n\n\tFrom: Fred H Olson -- WB0YQM (FRED%JWHv&amp;quot;| __truncated__ ...
#  - attr(*, &amp;quot;spec&amp;quot;)=
#   .. cols(
#   ..   subject = col_character(),
#   ..   author = col_character(),
#   ..   email = col_character(),
#   ..   date = col_datetime(format = &amp;quot;&amp;quot;),
#   ..   msg_body = col_character(),
#   ..   thread = col_character(),
#   ..   content = col_character()
#   .. )
#  - attr(*, &amp;quot;problems&amp;quot;)=&amp;lt;externalptr&amp;gt;

msgs2 &amp;lt;- msgs %&amp;gt;%
  mutate_all(as.character) %&amp;gt;% ## I (Will) added this because I was getting an error stemming from read_csv() returning all factor variables. 
  filter(!is.na(content)) %&amp;gt;%
  mutate(
    msg_id = random_id(n = nrow(.)), #  Create a random ID
    email = case_when(
      is.na(email) ~ content %&amp;gt;% 
        str_match(&amp;quot;\\(.*\\..*\\)&amp;quot;) %&amp;gt;%
        str_sub(2,-2),
      T ~ email
    ),
    content = content %&amp;gt;%
      str_replace_all(&amp;quot;\\\n&amp;quot;, &amp;quot; &amp;quot;) %&amp;gt;%
      str_squish(),

# Note that this section takes a long time; I recommend patience. It may make sense to save intermittent steps
# instead of sequencing a long chain of pipes.

    msg_body = msg_body %&amp;gt;% 
                stringi::stri_trans_general(&amp;quot;Latin-ASCII&amp;quot;) %&amp;gt;%
                replace_html() %&amp;gt;%
                replace_emoticon() %&amp;gt;%
                replace_time(replacement = &#39;&amp;lt;&amp;lt;TIME&amp;gt;&amp;gt;&#39;) %&amp;gt;%
                replace_number(remove = TRUE) %&amp;gt;%
                replace_url() %&amp;gt;%
                replace_tag() %&amp;gt;%
                replace_email(),
    
    date = as.POSIXct(date),
    
    date = case_when(
      is.na(date) ~ str_match(
        content,
        &amp;quot;[0-9]{1,2} [A-Za-z]{3} [0-9]{2,4} [0-9]{2}:[0-9]{2}&amp;quot;
      ) %&amp;gt;%
      lubridate::dmy_hm(),
      T ~ date
    ),
    author = author %&amp;gt;% tolower %&amp;gt;% str_replace_all(&amp;quot;[^a-z]&amp;quot;, &amp;quot; &amp;quot;),
    email = email %&amp;gt;% tolower %&amp;gt;% str_replace_all(&amp;quot;[^a-z\\.@_\\d ]&amp;quot;, &amp;quot;&amp;quot;)
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;a-digression-into-regular-expressions&#34;&gt;A Digression into Regular Expressions&lt;/h2&gt;
&lt;p&gt;In the above code, you see a number of regular expressions (also referred to as regex) that are used to find and manipulate particular sequences of characters. Both the &lt;code&gt;textclean&lt;/code&gt; and &lt;code&gt;stringr&lt;/code&gt; packages provide functions (e.g., replace_emoticon and str_match, respectively) that leverage regular expressions. Regular expressions provide a very powerful and concise syntax for working with text, but they can be very difficult to read, and if you’re not careful, they can return unintended results. Use them sparingly and add comments for clarity.&lt;/p&gt;
&lt;p&gt;At their core, regular expressions match patterns in text. A pattern can be as simple as “abc,” or can be significantly more complicated. For a quick introduction to regular expressions in R, read through the corresponding R for Data Science chapter: &lt;a href=&#34;https://r4ds.had.co.nz/strings.html#matching-patterns-with-regular-expressions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://r4ds.had.co.nz/strings.html#matching-patterns-with-regular-expressions&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In the above code, we have used the following regular expressions. Can you tell what pattern each of these regular expressions will match?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;\\(.*\\..*\\)&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;\\\n&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;[0-9]{1,2} [A-Za-z]{3} [0-9]{2,4} [0-9]{2}:[0-9]{2}&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;[^a-zA-Z]&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;[^a-zA-Z\\.@_\\d ]&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hint: see &lt;a href=&#34;https://cheatography.com/davechild/cheat-sheets/regular-expressions/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://cheatography.com/davechild/cheat-sheets/regular-expressions/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the following &lt;code&gt;string_lowercase&lt;/code&gt;, develop a regular expression that capitalizes the first letter of each sentence of string_lowercase (taken from &lt;a href=&#34;https://en.wikipedia.org/wiki/Regular_expression%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://en.wikipedia.org/wiki/Regular_expression)&lt;/a&gt;. Is there an alternate or better way to do this without using regular expressions?&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;string_lowercase &amp;lt;- &amp;quot;a regular expression (shortened as regex or regexp; also referred to as rational expression) is a sequence of characters that define a search pattern. usually such patterns are used by string-searching algorithms for &#39;find&#39; or &#39;find and replace&#39; operations on strings, or for input validation. it is a technique developed in theoretical computer science and formal language theory. the concept arose in the 1950s when the american mathematician stephen cole kleene formalized the description of a regular language. the concept came into common use with unix text-processing utilities. different syntaxes for writing regular expressions have existed since the 1980s, one being the posix standard and another, widely used, being the perl syntax. regular expressions are used in search engines, search and replace dialogs of word processors and text editors, in text processing utilities such as sed and awk and in lexical analysis. many programming languages provide regex capabilities either built-in or via libraries.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hint: Read the documentation for &lt;code&gt;str_replace&lt;/code&gt; and &lt;code&gt;str_replace_all&lt;/code&gt;. Explore ?case for case conversion. You may need to use a different regular expression or different approach to capitalize the first sentence.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tokenization-stemming--lemmatization&#34;&gt;Tokenization, Stemming &amp;amp; Lemmatization&lt;/h2&gt;
&lt;h3 id=&#34;tokenization&#34;&gt;Tokenization&lt;/h3&gt;
&lt;p&gt;Tokenization is the task of chopping up your text into pieces, called tokens; it can also involve throwing away certain characters, such as punctuation. Tokenization is important in that it defines the smallest unit of analysis at which you can examine your text. In the simplest cases, tokens are simply words. However, there are number of rules that you may want to employ that would work in certain instances and would not work in others. For example, &lt;code&gt;aren&#39;t&lt;/code&gt; can be tokenised as &lt;code&gt;are&lt;/code&gt; and &lt;code&gt;n&#39;t&lt;/code&gt; or &lt;code&gt;aren&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt; or as &lt;code&gt;arent&lt;/code&gt;, depending on which rules you want to use.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tidytext)

data(stop_words)

stop_words
# # A tibble: 1,149 × 2
#    word        lexicon
#    &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;  
#  1 a           SMART  
#  2 a&#39;s         SMART  
#  3 able        SMART  
#  4 about       SMART  
#  5 above       SMART  
#  6 according   SMART  
#  7 accordingly SMART  
#  8 across      SMART  
#  9 actually    SMART  
# 10 after       SMART  
# # … with 1,139 more rows

other_stop_words &amp;lt;- tibble( word = 
      c(&amp;quot;cohousing&amp;quot;,
        &amp;quot;mailing&amp;quot;, 
      &amp;quot;list&amp;quot;,
      &amp;quot;unsubscribe&amp;quot;,
      &amp;quot;mailman&amp;quot;, 
      &amp;quot;listinfo&amp;quot;,
      &amp;quot;list&amp;quot;,
      &amp;quot;Âº&amp;quot;,
      &amp;quot;org&amp;quot;,
      &amp;quot;rob&amp;quot;,
      &amp;quot;ann&amp;quot;,
      &amp;quot;sharon&amp;quot;,
      &amp;quot;villines&amp;quot;,
      &amp;quot;sandelin&amp;quot;, 
      &amp;quot;zabaldo&amp;quot;,
      &amp;quot;fholson&amp;quot;),
      
      lexicon = &amp;quot;CUSTOM&amp;quot;)


stop_words &amp;lt;- bind_rows(stop_words, other_stop_words)

body_tokens &amp;lt;- msgs2 %&amp;gt;%
  unnest_tokens(word, msg_body, token=&#39;words&#39;) %&amp;gt;%
  anti_join(stop_words)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Other types of tokens include characters, n-grams, sentences, lines, paragraphs, and tweets. Explore these. anti_join is a useful function to only keep words that are not in the stop_words tibble. Notice why we needed to use word as a column name.&lt;/p&gt;
&lt;p&gt;A naive word count and frequency would look as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;top_word_counts &amp;lt;- body_tokens %&amp;gt;%
  filter(
      !str_detect(word,&amp;quot;\\d&amp;quot;),
    !str_detect(word, &amp;quot;_&amp;quot;)
  ) %&amp;gt;%
  group_by(word) %&amp;gt;%
  summarise(count = n()) %&amp;gt;%
  select(word = word, count) %&amp;gt;%
  arrange(desc(count))
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the body_tokens above, we tried to remove common words that might skew the frequencies. Looking at the top_word_counts, iteratively build a list to remove more words to make the analysis more compelling and interesting.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;stemming&#34;&gt;Stemming&lt;/h3&gt;
&lt;p&gt;Stemming algorithms work by cutting off the end or the beginning of the word, taking into account a list of common prefixes and suffixes that can be found in an inflected word. There are different algorithms that can be used in the stemming process, but the most common in English is the Porter stemmer. The purpose of stemming is to reduce similar words to their shared root; e.g., “talking,” “talked,” and “talks” might all be reduced to “talk.” We can use the &lt;code&gt;SnowballC&lt;/code&gt; package to stem our tokens.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(SnowballC)

top_stem_counts &amp;lt;- body_tokens %&amp;gt;%
                      select(word)%&amp;gt;%
                      mutate(stem_word = wordStem(word)) %&amp;gt;%
                       group_by(stem_word) %&amp;gt;%
                       summarise(count = n()) %&amp;gt;%
                       select(word = stem_word, count) %&amp;gt;%
                       arrange(desc(count))

top_stem_counts
# # A tibble: 73,015 × 2
#    word     count
#    &amp;lt;chr&amp;gt;    &amp;lt;int&amp;gt;
#  1 commun  104195
#  2 time     50521
#  3 peopl    50314
#  4 skeptic  47595
#  5 hous     42853
#  6 stick    37263
#  7 tongu    36576
#  8 common   27568
#  9 live     26204
# 10 info     24591
# # … with 73,005 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;lemmatization&#34;&gt;Lemmatization&lt;/h3&gt;
&lt;p&gt;Lemmatization takes into consideration the morphological analysis of the words. For example, “ran” and “run” are derived from the same lemma. Lemmatization requires a language-specific dictonary for translating words to their lemmas; we will use a dictionary provided in the &lt;code&gt;textstem&lt;/code&gt; package.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(textstem)

top_lemm_counts &amp;lt;- body_tokens %&amp;gt;%
                      select(word)%&amp;gt;%
                       mutate(lemm_word = lemmatize_words(word))%&amp;gt;%
                       group_by(lemm_word) %&amp;gt;%
                       summarise(count = n()) %&amp;gt;%
                       select(word = lemm_word, count) %&amp;gt;%
                       arrange(desc(count))

g1 &amp;lt;- top_lemm_counts %&amp;gt;%
        top_n(30) %&amp;gt;%
        ggplot() + 
        geom_bar(aes(x=  reorder(word, count), y = count), stat = &#39;identity&#39;) +
        coord_flip() + 
        xlab(&amp;quot;&amp;quot;)+
        theme_bw()

library(plotly)

ggplotly(g1)
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:672px;height:480px;&#34; class=&#34;plotly html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;data&#34;:[{&#34;orientation&#34;:&#34;h&#34;,&#34;width&#34;:[0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.9,0.899999999999999,0.9,0.9,0.9,0.9,0.9,0.9],&#34;base&#34;:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],&#34;x&#34;:[98528,50346,50314,47557,42836,37684,36576,27664,27491,24747,24590,23893,22425,21361,19070,17014,15791,15768,14937,13695,13424,13422,13102,13102,13024,12750,12677,12499,12061,11722],&#34;y&#34;:[30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,7,8,6,5,4,3,2,1],&#34;text&#34;:[&#34;reorder(word, count): community&lt;br /&gt;count: 98528&#34;,&#34;reorder(word, count): time&lt;br /&gt;count: 50346&#34;,&#34;reorder(word, count): people&lt;br /&gt;count: 50314&#34;,&#34;reorder(word, count): skeptical&lt;br /&gt;count: 47557&#34;,&#34;reorder(word, count): house&lt;br /&gt;count: 42836&#34;,&#34;reorder(word, count): stick&lt;br /&gt;count: 37684&#34;,&#34;reorder(word, count): tongue&lt;br /&gt;count: 36576&#34;,&#34;reorder(word, count): write&lt;br /&gt;count: 27664&#34;,&#34;reorder(word, count): common&lt;br /&gt;count: 27491&#34;,&#34;reorder(word, count): build&lt;br /&gt;count: 24747&#34;,&#34;reorder(word, count): info&lt;br /&gt;count: 24590&#34;,&#34;reorder(word, count): live&lt;br /&gt;count: 23893&#34;,&#34;reorder(word, count): home&lt;br /&gt;count: 22425&#34;,&#34;reorder(word, count): unit&lt;br /&gt;count: 21361&#34;,&#34;reorder(word, count): message&lt;br /&gt;count: 19070&#34;,&#34;reorder(word, count): cohousing.org&lt;br /&gt;count: 17014&#34;,&#34;reorder(word, count): share&lt;br /&gt;count: 15791&#34;,&#34;reorder(word, count): lot&lt;br /&gt;count: 15768&#34;,&#34;reorder(word, count): issue&lt;br /&gt;count: 14937&#34;,&#34;reorder(word, count): village&lt;br /&gt;count: 13695&#34;,&#34;reorder(word, count): move&lt;br /&gt;count: 13424&#34;,&#34;reorder(word, count): include&lt;br /&gt;count: 13422&#34;,&#34;reorder(word, count): archive&lt;br /&gt;count: 13102&#34;,&#34;reorder(word, count): process&lt;br /&gt;count: 13102&#34;,&#34;reorder(word, count): meet&lt;br /&gt;count: 13024&#34;,&#34;reorder(word, count): decision&lt;br /&gt;count: 12750&#34;,&#34;reorder(word, count): cost&lt;br /&gt;count: 12677&#34;,&#34;reorder(word, count): project&lt;br /&gt;count: 12499&#34;,&#34;reorder(word, count): plan&lt;br /&gt;count: 12061&#34;,&#34;reorder(word, count): design&lt;br /&gt;count: 11722&#34;],&#34;type&#34;:&#34;bar&#34;,&#34;textposition&#34;:&#34;none&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(89,89,89,1)&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;transparent&#34;}},&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null}],&#34;layout&#34;:{&#34;margin&#34;:{&#34;t&#34;:26.2283105022831,&#34;r&#34;:7.30593607305936,&#34;b&#34;:40.1826484018265,&#34;l&#34;:86.9406392694064},&#34;plot_bgcolor&#34;:&#34;rgba(255,255,255,1)&#34;,&#34;paper_bgcolor&#34;:&#34;rgba(255,255,255,1)&#34;,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;xaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-4926.4,103454.4],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;0&#34;,&#34;25000&#34;,&#34;50000&#34;,&#34;75000&#34;,&#34;100000&#34;],&#34;tickvals&#34;:[0,25000,50000,75000,100000],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;0&#34;,&#34;25000&#34;,&#34;50000&#34;,&#34;75000&#34;,&#34;100000&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;outside&#34;,&#34;tickcolor&#34;:&#34;rgba(51,51,51,1)&#34;,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0.66417600664176,&#34;showticklabels&#34;:true,&#34;tickfont&#34;:{&#34;color&#34;:&#34;rgba(77,77,77,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;y&#34;,&#34;title&#34;:{&#34;text&#34;:&#34;count&#34;,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187}},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;yaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[0.4,30.6],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;design&#34;,&#34;plan&#34;,&#34;project&#34;,&#34;cost&#34;,&#34;decision&#34;,&#34;meet&#34;,&#34;archive&#34;,&#34;process&#34;,&#34;include&#34;,&#34;move&#34;,&#34;village&#34;,&#34;issue&#34;,&#34;lot&#34;,&#34;share&#34;,&#34;cohousing.org&#34;,&#34;message&#34;,&#34;unit&#34;,&#34;home&#34;,&#34;live&#34;,&#34;info&#34;,&#34;build&#34;,&#34;common&#34;,&#34;write&#34;,&#34;tongue&#34;,&#34;stick&#34;,&#34;house&#34;,&#34;skeptical&#34;,&#34;people&#34;,&#34;time&#34;,&#34;community&#34;],&#34;tickvals&#34;:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;design&#34;,&#34;plan&#34;,&#34;project&#34;,&#34;cost&#34;,&#34;decision&#34;,&#34;meet&#34;,&#34;archive&#34;,&#34;process&#34;,&#34;include&#34;,&#34;move&#34;,&#34;village&#34;,&#34;issue&#34;,&#34;lot&#34;,&#34;share&#34;,&#34;cohousing.org&#34;,&#34;message&#34;,&#34;unit&#34;,&#34;home&#34;,&#34;live&#34;,&#34;info&#34;,&#34;build&#34;,&#34;common&#34;,&#34;write&#34;,&#34;tongue&#34;,&#34;stick&#34;,&#34;house&#34;,&#34;skeptical&#34;,&#34;people&#34;,&#34;time&#34;,&#34;community&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;outside&#34;,&#34;tickcolor&#34;:&#34;rgba(51,51,51,1)&#34;,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0.66417600664176,&#34;showticklabels&#34;:true,&#34;tickfont&#34;:{&#34;color&#34;:&#34;rgba(77,77,77,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;x&#34;,&#34;title&#34;:{&#34;text&#34;:&#34;&#34;,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187}},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;shapes&#34;:[{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:&#34;transparent&#34;,&#34;line&#34;:{&#34;color&#34;:&#34;rgba(51,51,51,1)&#34;,&#34;width&#34;:0.66417600664176,&#34;linetype&#34;:&#34;solid&#34;},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0,&#34;x1&#34;:1,&#34;y0&#34;:0,&#34;y1&#34;:1}],&#34;showlegend&#34;:false,&#34;legend&#34;:{&#34;bgcolor&#34;:&#34;rgba(255,255,255,1)&#34;,&#34;bordercolor&#34;:&#34;transparent&#34;,&#34;borderwidth&#34;:1.88976377952756,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895}},&#34;hovermode&#34;:&#34;closest&#34;,&#34;barmode&#34;:&#34;relative&#34;},&#34;config&#34;:{&#34;doubleClick&#34;:&#34;reset&#34;,&#34;modeBarButtonsToAdd&#34;:[&#34;hoverclosest&#34;,&#34;hovercompare&#34;],&#34;showSendToCloud&#34;:false},&#34;source&#34;:&#34;A&#34;,&#34;attrs&#34;:{&#34;58e11982ce77&#34;:{&#34;x&#34;:{},&#34;y&#34;:{},&#34;type&#34;:&#34;bar&#34;}},&#34;cur_data&#34;:&#34;58e11982ce77&#34;,&#34;visdat&#34;:{&#34;58e11982ce77&#34;:[&#34;function (y) &#34;,&#34;x&#34;]},&#34;highlight&#34;:{&#34;on&#34;:&#34;plotly_click&#34;,&#34;persistent&#34;:false,&#34;dynamic&#34;:false,&#34;selectize&#34;:false,&#34;opacityDim&#34;:0.2,&#34;selected&#34;:{&#34;opacity&#34;:1},&#34;debounce&#34;:0},&#34;shinyEvents&#34;:[&#34;plotly_hover&#34;,&#34;plotly_click&#34;,&#34;plotly_selected&#34;,&#34;plotly_relayout&#34;,&#34;plotly_brushed&#34;,&#34;plotly_brushing&#34;,&#34;plotly_clickannotation&#34;,&#34;plotly_doubleclick&#34;,&#34;plotly_deselect&#34;,&#34;plotly_afterplot&#34;,&#34;plotly_sunburstclick&#34;],&#34;base_url&#34;:&#34;https://plot.ly&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    What’s going on with stick and tongue? Is this an issue with replacing the emoticons?
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;n-grams&#34;&gt;N-grams&lt;/h3&gt;
&lt;p&gt;Looking at words in isolation has all sorts of problems. For example, ‘not happy’ refers to a single concept than two different concepts of negation and happiness. This will affect sentiment analysis later on. To deal with this issue, we could potentially use n-grams. An n-gram reflects a token of n sequenced units. By looking at multiple units of text as a single token, we can overcome some of the challenges of looking at single words in isolation from their context. Here, we construct bigrams, or two-word n-grams.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bigrams &amp;lt;- msgs2 %&amp;gt;%
  select(-thread) %&amp;gt;%
  unnest_tokens(
    bigram,
    msg_body,
    token = &amp;quot;ngrams&amp;quot;,
    n = 2
  )

negation_words &amp;lt;- c(
  &amp;quot;not&amp;quot;,
  &amp;quot;no&amp;quot;,
  &amp;quot;never&amp;quot;, 
  &amp;quot;without&amp;quot;,
  &amp;quot;don&#39;t&amp;quot;,
  &amp;quot;cannot&amp;quot;,
  &amp;quot;can&#39;t&amp;quot;,
  &amp;quot;isn&#39;t&amp;quot;,
  &amp;quot;wasn&#39;t&amp;quot;,
  &amp;quot;hadn&#39;t&amp;quot;,
  &amp;quot;couldn&#39;t&amp;quot;,
  &amp;quot;wouldn&#39;t&amp;quot;,
  &amp;quot;won&#39;t&amp;quot;
)

modified_stops &amp;lt;- stop_words %&amp;gt;%
  filter(!(word %in% negation_words))

refined_bigrams &amp;lt;- bigrams %&amp;gt;%
  separate(bigram, c(&amp;quot;word1&amp;quot;, &amp;quot;word2&amp;quot;)) %&amp;gt;%
  filter(
    !word1 %in% modified_stops$word,
    !word2 %in% modified_stops$word
  ) %&amp;gt;%
  mutate(lemm_word1 = lemmatize_words(word1),
         lemm_word2 = lemmatize_words(word2))

refined_bigrams &amp;lt;- refined_bigrams %&amp;gt;%
  count(lemm_word1, lemm_word2, sort = T) %&amp;gt;%
  unite(bigram, lemm_word1, lemm_word2, sep = &amp;quot; &amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visualise the top 20 bigrams using ggplot.&lt;/li&gt;
&lt;li&gt;Wordclouds are bad statistical graphics. However, they are popular. Create a Wordcloud for these bigrams using &lt;code&gt;wordcloud2&lt;/code&gt; package.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;There is no reason to think that bigrams are the right tokens. You can use any combination of words. But you should be cognizant about the the trade offs between increasing the n and the marginal value to the analysis. As you can see, bigrams are a substantially larger dataset than words. For a vocabulary of 1,000 terms, the universe of potential bigrams are 1,000,000, though you will see much smaller dataset in practice because of linguistic conventions.&lt;/p&gt;
&lt;h2 id=&#34;sentiment-analysis&#34;&gt;Sentiment Analysis&lt;/h2&gt;
&lt;p&gt;Sentiment analysis is the interpretation and classification of emotions (positive, negative, and neutral) within text data. It is notoriously unreliable without proper understanding of the context and linguistic patterns such as sarcasm, subtweeting, etc.&lt;/p&gt;
&lt;p&gt;There are a number of dictionaries that exist for evaluating opinion or emotion in text. The &lt;code&gt;tidytext&lt;/code&gt; package provides access to several sentiment lexicons. Three general-purpose lexicons are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AFINN from Finn Årup Nielsen,&lt;/li&gt;
&lt;li&gt;bing from Bing Liu and collaborators, and&lt;/li&gt;
&lt;li&gt;nrc from Saif Mohammad and Peter Turney.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All three of these lexicons are based on unigrams, i.e., tokens of single words. These lexicons contain many English words, and the words are assigned scores for positive/negative sentiment, and also possibly emotions like joy, anger, and sadness. The nrc lexicon categorizes words in a binary fashion (“yes”/“no”) into categories of positive, negative, anger, anticipation, disgust, fear, joy, sadness, surprise, and trust. The bing lexicon categorizes words in a binary fashion into positive and negative categories. The AFINN lexicon assigns words with a score that runs between -5 and 5, with negative scores indicating negative sentiment and positive scores indicating positive sentiment. There are also specialized lexicons, such as the loughran lexicon, which is designed for analysis of financial documents. This lexicon labels words with six possible sentiments important in financial contexts: “negative,” “positive,” “litigious,” “uncertainty,” “constraining,” or “superfluous.”&lt;/p&gt;
&lt;p&gt;You can access these lexicons via:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(textdata)
nrc_sentiment &amp;lt;- get_sentiments(&#39;nrc&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can estimate the sentiment of each message by looking at the frequency of words with a particular sentiment using the following code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;body_tokens %&amp;gt;%
      select(word, msg_id) %&amp;gt;%
      mutate(lemm_word = lemmatize_words(word)) %&amp;gt;%
     inner_join(nrc_sentiment, by=c(&#39;lemm_word&#39; = &#39;word&#39;)) %&amp;gt;%
     group_by(msg_id, sentiment) %&amp;gt;%
     summarize(count = n()) %&amp;gt;%
     mutate(freq = count/sum(count)) %&amp;gt;%
     pivot_wider(id_cols = msg_id, values_from=freq, names_from=sentiment, values_fill = 0) %&amp;gt;%
    top_n(5) 
# # A tibble: 44,609 × 11
# # Groups:   msg_id [44,609]
#    msg_id      anger anticipation disgust  fear negative positive sadness  trust
#    &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
#  1 0000c5777… 0.0870       0.217   0.0435 0.130   0.217     0.174  0.0870 0.0435
#  2 000169c3f… 0            0.143   0      0       0         0.429  0      0.143 
#  3 0001b31d1… 0            0.15    0      0       0.05      0.5    0      0.2   
#  4 000364e2c… 0.02         0.16    0.01   0.02    0.1       0.34   0.08   0.15  
#  5 0004d9c5f… 0            0.2     0      0       0.2       0.4    0      0.1   
#  6 000551075… 0.02         0.24    0      0       0.08      0.34   0.02   0.1   
#  7 0007194c3… 0            0.2     0      0.133   0.0667    0.267  0      0.133 
#  8 00087d159… 0.0819       0.111   0.0234 0.111   0.129     0.240  0.0292 0.158 
#  9 0009e398e… 0.130        0.0926  0.0556 0.148   0.130     0.231  0.0648 0.0648
# 10 000a0aa90… 0            0.08    0.12   0       0.2       0.24   0.12   0.12  
# # … with 44,599 more rows, and 2 more variables: joy &amp;lt;dbl&amp;gt;, surprise &amp;lt;dbl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What are the problems with the above approach?
&lt;ul&gt;
&lt;li&gt;Hint 1: There’s a one-to-many relationship in NRC. Does this need fixing?&lt;/li&gt;
&lt;li&gt;Hint 2: We know that the sentiment of a single word is often context-dependent. How can we address this (e.g., by using bigrams)?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;N-grams are better than unigrams in many instances in detecting sentiment, but they have their own challenges. For example, it is not clear what the appropriate value of n is. In such instances, it may be useful to think about the sentiment of the sentence as a whole. Since sentences are denumerably infinite, it is not possible to create a sentiment dictionary for sentences.&lt;/p&gt;
&lt;p&gt;Furthermore, the presence of valence shifters (negation, amplifier, deamplifier etc.) changes the meaning and sentiment of the sentences. In such instances, it may be useful to use a package that can consider the entire sentence rather than combinations of words. &lt;code&gt;sentimentr&lt;/code&gt; is one such package.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(sentimentr)

msgs2 %&amp;gt;% 
  top_n(50) %&amp;gt;% 
  get_sentences() %&amp;gt;%
  sentiment_by(by=c(&#39;date&#39;, &#39;author&#39;)) %&amp;gt;% 
  top_n(10)
#                    date            author word_count   sd ave_sentiment
#  1: 1997-12-16 14:15:00      paul viscuso        164 0.37          0.26
#  2: 2001-10-02 04:00:00    molly williams        724 0.33          0.28
#  3: 2006-07-12 04:00:00     martin sheehy        372 0.32          0.41
#  4: 2008-02-22 05:00:00     craig ragland        252 0.23          0.28
#  5: 2008-04-11 04:00:00      steven hecht        435 0.35          0.55
#  6: 2011-04-13 04:00:00     craig ragland        305 0.27          0.40
#  7: 2012-09-21 04:00:00    jerry mcintire        193 0.23          0.26
#  8: 2014-07-14 04:00:00 fred list manager        200 0.34          0.24
#  9: 2015-05-05 04:00:00       allison tom        315 0.27          0.32
# 10: 2015-08-26 04:00:00             diane        705 0.21          0.24
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use a different package, such as &lt;code&gt;syuzhet&lt;/code&gt; instead of &lt;code&gt;sentimentr&lt;/code&gt;. What are the similarities and differences?&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;This is but a scratch in the vast field of text mining and natural language processing. As you may have noticed, much of this analysis is domain specific and, more importantly, language specific. While some principles are transferable, it is always a good idea to learn about a domain prior to devising an analytical strategy.&lt;/p&gt;
&lt;h2 id=&#34;additional-resources&#34;&gt;Additional Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Silge, Julia, and David Robinson. 2020. Text Mining with R. Sebastapol, CA: O’ Reilly. &lt;a href=&#34;https://www.tidytextmining.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.tidytextmining.com/&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
